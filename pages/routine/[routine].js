import React, {useState, useEffect} from 'react'
import { Router, useRouter } from 'next/router'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../../styles/home.module.scss'
import SetList from '../../components/setList'
import Navigation from '../../components/Navigation'

export default function Home({ workoutData, routineData, thisRoutine, nextRoutine, today }) {
  const router = useRouter();

  const refreshData = () => {
    router.replace(router.asPath);
  }

  return (
    <div>
      <Head>
        <title>Workout Tracker</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Navigation thisRoutine={thisRoutine}
          nextRoutine={nextRoutine}
          routines={routineData} />
        <SetList movements={workoutData} today={today} />
      </main>
    </div>
  )
}

// export async function getServerSideProps() {
//   const routineId = params.routineId;
//   apiUrl = process.env.apiUrl || `http://localhost:3333`;
// }

export async function getServerSideProps({params}) {
  const apiUrl = process.env.API_URL || `http://localhost:3333`;
  const routineId = params.routine
  let routineData,
      workoutData,
      thisRoutine,
      nextRoutine,
      today;

  await fetch (`${apiUrl}/routine/${routineId}`, { accept: "application/json" })
  .then (data => data.json())
  .then (data => {
    routineData = data.routines;
    workoutData = data.movements;
    thisRoutine = data.thisRoutine;
    nextRoutine = data.nextRoutine;
    today = data.todaysDate;
  })

  return { props: { workoutData, routineData, thisRoutine, nextRoutine, today } }
}

export async function getServerSidePaths() {
    const apiUrl = process.env.API_URL || `http://localhost:3333`;
    const routines = await fetch(`${apiUrl}/routines`).then(data => data.json());
    const paths = routines.map(item => {
        return {
            params: {
                routine: item.routine_id
            }
        }
    })

    return {
        paths,
        fallback: false
    }
//   const apiUrl = process.env.API_URL;
//   const signIds = await fetch(`${apiUrl}/signids`).then(data => data.json());
//   const paths = signIds.map((item) => {
//     return {
//       params: {
//         sign: item.sign_id
//       }
//     }
//   })
  return {
    paths,
    fallback: false
  }
}